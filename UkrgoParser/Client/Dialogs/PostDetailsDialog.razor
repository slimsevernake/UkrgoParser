@using UkrgoParser.Shared.Models.Entities

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<MatDialogTitle class="dialog-title">
    <div class="title">@Post.Title</div>
    <div @onclick="@(_ => CloseDialog())" class="close">
        <MatIcon Icon="@MatIconNames.Close"></MatIcon>
    </div>
</MatDialogTitle>
<MatDialogContent>
    @if (!string.IsNullOrEmpty(Post.Price))
    {
        <div class="mb-2">
            <strong>@Post.Price</strong>
        </div>
    }
    <div class="row mb-2 attributes-panel">
        @foreach (var attr in Post.Attributes)
        {
            <div class="col-auto attribute-item">@attr</div>
        }
    </div>
    <div class="mb-2">
        @Post.Description
    </div>
    <div class="mb-2">
        <MatCaption>
            @Post.Date
        </MatCaption>
    </div>
    @if (Post.ImageUris != null)
    {
        <div class="splide">
            <div class="splide__track">
                <ul class="splide__list">
                    @foreach (var imageUri in Post.ImageUris)
                    {
                        <li class="splide__slide">
                            <img src="@($"api/browser/GetImage?imageUri={imageUri}&cropUnwantedBackground=true")" />
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
</MatDialogContent>
<MatDialogActions>
    <MatButton OnClick="@(_ => CloseDialog())">Ок</MatButton>
</MatDialogActions>

@code {

    [Parameter]
    public Post Post { get; set; }

    [CascadingParameter]
    public MatDialogReference DialogReference { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Yield();
            await JsRuntime.InvokeVoidAsync("loadSplide");
        }
    }

    [JSInvokable]
    public void StateChanged()
    {
        StateHasChanged();
    }

    private async Task CloseDialog()
    {
        DialogReference.Close(null);
        await JsRuntime.InvokeVoidAsync("makeWindowScrollbarVisibleIfNeeded");
    }
}