@using UkrgoParser.Shared.Models.Entities

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<MatDialogTitle class="dialog-title">
    <div class="title">@Post.Title</div>
    <div @onclick="@(_ => CloseDialog())" class="close">
        <MatIcon Icon="@MatIconNames.Close"></MatIcon>
    </div>
</MatDialogTitle>
<MatDialogContent>
    @if (!string.IsNullOrEmpty(Post.Price))
    {
        <div class="mb-2">
            <strong>@Post.Price</strong>
        </div>
    }
    <div class="row mb-2 attributes-panel">
        @foreach (var attr in Post.Attributes)
        {
            <div class="col-auto attribute-item">@attr</div>
        }
    </div>
    <div class="mb-2">
        @Post.Description
    </div>
    @if (Post.ImageUris != null)
    {
        <BSCarousel NumberOfItems="@Post.ImageUris.Count" Interval="0" Class="carousel-fixed-height" Touch="true">
            <BSCarouselIndicators />
            <div class="carousel-inner">
                @foreach (var imageUri in Post.ImageUris)
                {
                    <BSCarouselItem src="@($"api/browser/GetImage?imageUri={imageUri}&cropUnwantedBackground=true")"/>
                }
            </div>
            <BSCarouselControl CarouselDirection="CarouselDirection.Previous"/>
            <BSCarouselControl CarouselDirection="CarouselDirection.Next"/>
        </BSCarousel>
    }
</MatDialogContent>
<MatDialogActions>
    <MatButton OnClick="@(_ => CloseDialog())">Ок</MatButton>
</MatDialogActions>

@code {

    [Parameter]
    public Post Post { get; set; }

    [CascadingParameter]
    public MatDialogReference DialogReference { get; set; }

    private async Task CloseDialog()
    {
        DialogReference.Close(null);
        await JsRuntime.InvokeAsync<object>("makeWindowScrollbarVisibleIfNeeded");
    }
}